"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var globals_1 = require("~/entities/globals");
var database_service_1 = require("~/services/database.service");
var SQLite = require("nativescript-sqlite");
var GroceryListDatabaseService = /** @class */ (function () {
    function GroceryListDatabaseService(baseDBService) {
        this.baseDBService = baseDBService;
    }
    GroceryListDatabaseService.prototype.createGroceryListTable = function () {
        return new Promise(function (resolve, reject) {
            return (new SQLite(globals_1.DB_GLOBALS.DB_NAME)).then(function (db) {
                db.execSQL("\n          CREATE TABLE IF NOT EXISTS " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + " (\n            glist_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT (0),\n            quantity INTEGER DEFAULT (1),\n            product_id_fk INTEGER NOT NULL,\n            list_id_fk INTEGER NOT NULL,\n            FOREIGN KEY (product_id_fk) REFERENCES list (glist_id),\n            FOREIGN KEY (list_id_fk) REFERENCES product (product_id)\n          )\n        ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    GroceryListDatabaseService.prototype.getGroceryListDetails = function (listId) {
        var _this = this;
        var queryString = "\n      SELECT\n        " + globals_1.DB_GLOBALS.MYLISTS_TABLE_NAME + ".glist_id as glist_id,\n        groceryList.glist_id as id,\n        glist_name,\n        product_id_fk,\n        product_name,\n        brand,\n        quantity\n      FROM " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + "\n      INNER JOIN " + globals_1.DB_GLOBALS.MYLISTS_TABLE_NAME + " ON " + globals_1.DB_GLOBALS.MYLISTS_TABLE_NAME + ".glist_id = " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + ".list_id_fk\n      INNER JOIN " + globals_1.DB_GLOBALS.PRODUCTS_TABLE_NAME + " ON " + globals_1.DB_GLOBALS.PRODUCTS_TABLE_NAME + ".product_id = " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + ".product_id_fk\n      WHERE list_id_fk = " + listId + " ORDER BY glist_id COLLATE NOCASE\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        console.log(JSON.stringify(row));
                        result.push({
                            id: row[1],
                            productId: row[3],
                            productName: row[4],
                            brand: row[5],
                            quantity: row[6]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    GroceryListDatabaseService.prototype.insertIntoGroceryListDetails = function (listId, productId, quantity) {
        var _this = this;
        var queryString = "\n      INSERT INTO " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + " (product_id_fk, list_id_fk, quantity)\n      VALUES (" + productId + ", " + listId + ", " + quantity + ")\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] insertIntoGroceryListDetails");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDatabaseService.prototype.updateGroceryListDetails = function (glistId, listId, productId, quantity) {
        var _this = this;
        var queryString = "\n      UPDATE " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + "\n      SET product_id_fk=" + productId + ", list_id_fk=" + listId + ", quantity=" + quantity + "\n      WHERE glist_id=" + glistId + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] updateGroceryListDetails");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDatabaseService.prototype.deleteGroceryListItem = function (id) {
        var _this = this;
        var queryString = "\n      DELETE FROM " + globals_1.DB_GLOBALS.GROCERYLIST_TABLE_NAME + "\n      WHERE glist_id=" + id + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] deleteGroceryListItem");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDatabaseService.prototype.getMyLists = function () {
        return this.baseDBService.getMyLists();
    };
    GroceryListDatabaseService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [database_service_1.DatabaseService])
    ], GroceryListDatabaseService);
    return GroceryListDatabaseService;
}());
exports.GroceryListDatabaseService = GroceryListDatabaseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWdyb2NlcnktbGlzdC5kYXRhYmFzZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLWdyb2NlcnktbGlzdC5kYXRhYmFzZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLDhDQUFnRDtBQUNoRCxnRUFBOEQ7QUFFOUQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFHNUM7SUFFRSxvQ0FBb0IsYUFBOEI7UUFBOUIsa0JBQWEsR0FBYixhQUFhLENBQWlCO0lBQUksQ0FBQztJQUUvQywyREFBc0IsR0FBOUI7UUFDRSxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxvQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtnQkFDN0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyw0Q0FDb0Isb0JBQVUsQ0FBQyxzQkFBc0IseVhBUS9ELENBQUM7cUJBQ0MsSUFBSSxDQUFDO29CQUNKLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxDQUFDLEVBQUUsVUFBQSxLQUFLO29CQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLDBEQUFxQixHQUE1QixVQUE2QixNQUFjO1FBQTNDLGlCQXFD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T0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO29CQUM5RCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUN6QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hCLENBQUMsQ0FBQyxFQUFFLFVBQUEsS0FBSyxJQUFJLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFiLENBQWEsQ0FBQTtZQUM1QixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLCtDQUFVLEdBQWpCO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQTNIVSwwQkFBMEI7UUFEdEMsaUJBQVUsRUFBRTt5Q0FHd0Isa0NBQWU7T0FGdkMsMEJBQTBCLENBNEh0QztJQUFELGlDQUFDO0NBQUEsQUE1SEQsSUE0SEM7QUE1SFksZ0VBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IERCX0dMT0JBTFMgfSBmcm9tIFwifi9lbnRpdGllcy9nbG9iYWxzXCI7XHJcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gXCJ+L3NlcnZpY2VzL2RhdGFiYXNlLnNlcnZpY2VcIjtcclxuXHJcbmxldCBTUUxpdGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXNxbGl0ZVwiKTtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEdyb2NlcnlMaXN0RGF0YWJhc2VTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlREJTZXJ2aWNlOiBEYXRhYmFzZVNlcnZpY2UpIHsgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUdyb2NlcnlMaXN0VGFibGUoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICByZXR1cm4gKG5ldyBTUUxpdGUoREJfR0xPQkFMUy5EQl9OQU1FKSkudGhlbihkYiA9PiB7XHJcbiAgICAgICAgZGIuZXhlY1NRTChgXHJcbiAgICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAke0RCX0dMT0JBTFMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX0gKFxyXG4gICAgICAgICAgICBnbGlzdF9pZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQgTk9UIE5VTEwgREVGQVVMVCAoMCksXHJcbiAgICAgICAgICAgIHF1YW50aXR5IElOVEVHRVIgREVGQVVMVCAoMSksXHJcbiAgICAgICAgICAgIHByb2R1Y3RfaWRfZmsgSU5URUdFUiBOT1QgTlVMTCxcclxuICAgICAgICAgICAgbGlzdF9pZF9mayBJTlRFR0VSIE5PVCBOVUxMLFxyXG4gICAgICAgICAgICBGT1JFSUdOIEtFWSAocHJvZHVjdF9pZF9maykgUkVGRVJFTkNFUyBsaXN0IChnbGlzdF9pZCksXHJcbiAgICAgICAgICAgIEZPUkVJR04gS0VZIChsaXN0X2lkX2ZrKSBSRUZFUkVOQ0VTIHByb2R1Y3QgKHByb2R1Y3RfaWQpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgYClcclxuICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShkYik7XHJcbiAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGNyZWF0ZURCIC0+IGNyZWF0ZSB0YWJsZTpcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIltEQVRBQkFTRSBTRVJWSUNFIEVSUk9SXSBjcmVhdGVEQjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEdyb2NlcnlMaXN0RGV0YWlscyhsaXN0SWQ6IG51bWJlcikge1xyXG4gICAgY29uc3QgcXVlcnlTdHJpbmc6IHN0cmluZyA9IGBcclxuICAgICAgU0VMRUNUXHJcbiAgICAgICAgJHtEQl9HTE9CQUxTLk1ZTElTVFNfVEFCTEVfTkFNRX0uZ2xpc3RfaWQgYXMgZ2xpc3RfaWQsXHJcbiAgICAgICAgZ3JvY2VyeUxpc3QuZ2xpc3RfaWQgYXMgaWQsXHJcbiAgICAgICAgZ2xpc3RfbmFtZSxcclxuICAgICAgICBwcm9kdWN0X2lkX2ZrLFxyXG4gICAgICAgIHByb2R1Y3RfbmFtZSxcclxuICAgICAgICBicmFuZCxcclxuICAgICAgICBxdWFudGl0eVxyXG4gICAgICBGUk9NICR7REJfR0xPQkFMUy5HUk9DRVJZTElTVF9UQUJMRV9OQU1FfVxyXG4gICAgICBJTk5FUiBKT0lOICR7REJfR0xPQkFMUy5NWUxJU1RTX1RBQkxFX05BTUV9IE9OICR7REJfR0xPQkFMUy5NWUxJU1RTX1RBQkxFX05BTUV9LmdsaXN0X2lkID0gJHtEQl9HTE9CQUxTLkdST0NFUllMSVNUX1RBQkxFX05BTUV9Lmxpc3RfaWRfZmtcclxuICAgICAgSU5ORVIgSk9JTiAke0RCX0dMT0JBTFMuUFJPRFVDVFNfVEFCTEVfTkFNRX0gT04gJHtEQl9HTE9CQUxTLlBST0RVQ1RTX1RBQkxFX05BTUV9LnByb2R1Y3RfaWQgPSAke0RCX0dMT0JBTFMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX0ucHJvZHVjdF9pZF9ma1xyXG4gICAgICBXSEVSRSBsaXN0X2lkX2ZrID0gJHtsaXN0SWR9IE9SREVSIEJZIGdsaXN0X2lkIENPTExBVEUgTk9DQVNFXHJcbiAgICBgO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuYmFzZURCU2VydmljZS5jb25uZWN0VG9EQigpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5hbGwocXVlcnlTdHJpbmcpLnRoZW4ocm93cyA9PiB7XHJcbiAgICAgICAgICBsZXQgcmVzdWx0OiBBcnJheTxhbnk+ID0gW107XHJcbiAgICAgICAgICByb3dzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocm93KSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgICAgICBpZDogcm93WzFdLFxyXG4gICAgICAgICAgICAgIHByb2R1Y3RJZDogcm93WzNdLFxyXG4gICAgICAgICAgICAgIHByb2R1Y3ROYW1lOiByb3dbNF0sXHJcbiAgICAgICAgICAgICAgYnJhbmQ6IHJvd1s1XSxcclxuICAgICAgICAgICAgICBxdWFudGl0eTogcm93WzZdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfSksIGVycm9yID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGdldEdyb2NlcmllczpcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbnNlcnRJbnRvR3JvY2VyeUxpc3REZXRhaWxzKGxpc3RJZDogbnVtYmVyLCBwcm9kdWN0SWQ6IG51bWJlciwgcXVhbnRpdHk6IG51bWJlcikge1xyXG4gICAgY29uc3QgcXVlcnlTdHJpbmc6IHN0cmluZyA9IGBcclxuICAgICAgSU5TRVJUIElOVE8gJHtEQl9HTE9CQUxTLkdST0NFUllMSVNUX1RBQkxFX05BTUV9IChwcm9kdWN0X2lkX2ZrLCBsaXN0X2lkX2ZrLCBxdWFudGl0eSlcclxuICAgICAgVkFMVUVTICgke3Byb2R1Y3RJZH0sICR7bGlzdElkfSwgJHtxdWFudGl0eX0pXHJcbiAgICBgO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuYmFzZURCU2VydmljZS5jb25uZWN0VG9EQigpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5hbGwocXVlcnlTdHJpbmcpLnRoZW4oKHJvd3MgPT4gcmVzb2x2ZSh0cnVlKSksIGVycm9yID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGluc2VydEludG9Hcm9jZXJ5TGlzdERldGFpbHNcIik7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhxdWVyeVN0cmluZyk7XHJcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0pLCBlcnJvciA9PiByZWplY3QoZXJyb3IpXHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVHcm9jZXJ5TGlzdERldGFpbHMoZ2xpc3RJZDogbnVtYmVyLCBsaXN0SWQ6IG51bWJlciwgcHJvZHVjdElkOiBudW1iZXIsIHF1YW50aXR5OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nOiBzdHJpbmcgPSBgXHJcbiAgICAgIFVQREFURSAke0RCX0dMT0JBTFMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX1cclxuICAgICAgU0VUIHByb2R1Y3RfaWRfZms9JHtwcm9kdWN0SWR9LCBsaXN0X2lkX2ZrPSR7bGlzdElkfSwgcXVhbnRpdHk9JHtxdWFudGl0eX1cclxuICAgICAgV0hFUkUgZ2xpc3RfaWQ9JHtnbGlzdElkfVxyXG4gICAgYDtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmJhc2VEQlNlcnZpY2UuY29ubmVjdFRvREIoKS50aGVuKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXMuYWxsKHF1ZXJ5U3RyaW5nKS50aGVuKChyb3dzID0+IHJlc29sdmUodHJ1ZSkpLCBlcnJvciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIltEQVRBQkFTRSBTRVJWSUNFIEVSUk9SXSB1cGRhdGVHcm9jZXJ5TGlzdERldGFpbHNcIik7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhxdWVyeVN0cmluZyk7XHJcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0pLCBlcnJvciA9PiByZWplY3QoZXJyb3IpXHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkZWxldGVHcm9jZXJ5TGlzdEl0ZW0oaWQ6IG51bWJlcikge1xyXG4gICAgY29uc3QgcXVlcnlTdHJpbmc6IHN0cmluZyA9IGBcclxuICAgICAgREVMRVRFIEZST00gJHtEQl9HTE9CQUxTLkdST0NFUllMSVNUX1RBQkxFX05BTUV9XHJcbiAgICAgIFdIRVJFIGdsaXN0X2lkPSR7aWR9XHJcbiAgICBgO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuYmFzZURCU2VydmljZS5jb25uZWN0VG9EQigpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5hbGwocXVlcnlTdHJpbmcpLnRoZW4oKHJvd3MgPT4gcmVzb2x2ZSh0cnVlKSksIGVycm9yID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGRlbGV0ZUdyb2NlcnlMaXN0SXRlbVwiKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5U3RyaW5nKTtcclxuICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSksIGVycm9yID0+IHJlamVjdChlcnJvcilcclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE15TGlzdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5iYXNlREJTZXJ2aWNlLmdldE15TGlzdHMoKTtcclxuICB9XHJcbn0iXX0=