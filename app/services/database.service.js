"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var SQLite = require("nativescript-sqlite");
var DatabaseService = /** @class */ (function () {
    function DatabaseService() {
        this.DB_NAME = "cosacompro.db";
        this.PRODUCTS_TABLE_NAME = "products";
        this.GROCERYLIST_TABLE_NAME = "grocerylist";
        this.MYLISTS_TABLE_NAME = "list";
    }
    DatabaseService.prototype.createGroceryList = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return (new SQLite(_this.DB_NAME)).then(function (db) {
                db.execSQL("\n            CREATE TABLE IF NOT EXISTS " + _this.GROCERYLIST_TABLE_NAME + " (\n              glist_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT (0),\n              quantity INTEGER DEFAULT (1),\n              product_id_fk INTEGER NOT NULL,\n              list_id_fk INTEGER NOT NULL,\n              FOREIGN KEY (product_id_fk) REFERENCES list (glist_id),\n              FOREIGN KEY (list_id_fk) REFERENCES product (product_id)\n            )\n          ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    DatabaseService.prototype.createMyLists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return (new SQLite(_this.DB_NAME)).then(function (db) {
                db.execSQL("\n          CREATE TABLE IF NOT EXISTS " + _this.MYLISTS_TABLE_NAME + " (\n            glist_id INTEGER PRIMARY KEY NOT NULL DEFAULT (0),\n            glist_name TEXT NOT NULL,\n            start TEXT,\n            end TEXT\n          )\n        ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    DatabaseService.prototype.insertGrocery = function (grocerie) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList()
                .then(function (res) {
                res.execSQL("INSERT INTO " + _this.GROCERYLIST_TABLE_NAME + " (BARCODE, PRODUCT_NAME) VALUES (?, ?)", [grocerie.barCode, grocerie.productName])
                    .then(function (id) {
                    console.log("[DATABASE SERVICE] Added record in " + _this.GROCERYLIST_TABLE_NAME + " table, id: ", id);
                    resolve(true);
                }, function (error) {
                    console.log("[DATABASE SERVICE] Insert record in " + _this.GROCERYLIST_TABLE_NAME + " table ERROR: ", error);
                    reject(false);
                });
            });
        });
    };
    DatabaseService.prototype.getMyLists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all("SELECT * FROM " + _this.MYLISTS_TABLE_NAME).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        result.push({
                            listId: row[0],
                            listName: row[1],
                            startDate: row[2],
                            endDate: row[3]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    DatabaseService.prototype.getGroceryList = function (listId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all("\n            SELECT\n              " + _this.MYLISTS_TABLE_NAME + ".glist_id as glist_id,\n              glist_name,\n              product_name,\n              brand,\n              quantity\n            FROM " + _this.GROCERYLIST_TABLE_NAME + "\n            INNER JOIN " + _this.MYLISTS_TABLE_NAME + " ON " + _this.MYLISTS_TABLE_NAME + ".glist_id = " + _this.GROCERYLIST_TABLE_NAME + ".list_id_fk\n            INNER JOIN " + _this.PRODUCTS_TABLE_NAME + " ON " + _this.PRODUCTS_TABLE_NAME + ".product_id = " + _this.GROCERYLIST_TABLE_NAME + ".product_id_fk\n            WHERE list_id_fk = " + listId + " ORDER BY glist_id COLLATE NOCASE\n          ").then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        result.push({
                            productName: row[2],
                            brand: row[3],
                            quantity: row[4]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    DatabaseService = __decorate([
        core_1.Injectable()
    ], DatabaseService);
    return DatabaseService;
}());
exports.DatabaseService = DatabaseService;
//# sourceMappingURL=data:application/json;base64,