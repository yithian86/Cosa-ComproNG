"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var SQLite = require("nativescript-sqlite");
var DatabaseService = /** @class */ (function () {
    function DatabaseService() {
        this.DB_NAME = "cosacompro.db";
        this.PRODUCTS_TABLE_NAME = "products";
        this.GROCERYLIST_TABLE_NAME = "grocerylist";
        this.MYLISTS_TABLE_NAME = "list";
    }
    DatabaseService.prototype.createGroceryList = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return (new SQLite(_this.DB_NAME)).then(function (db) {
                db.execSQL("\n            CREATE TABLE IF NOT EXISTS " + _this.GROCERYLIST_TABLE_NAME + " (\n              glist_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT (0),\n              quantity INTEGER DEFAULT (1),\n              product_id_fk INTEGER NOT NULL,\n              list_id_fk INTEGER NOT NULL,\n              FOREIGN KEY (product_id_fk) REFERENCES list (glist_id),\n              FOREIGN KEY (list_id_fk) REFERENCES product (product_id)\n            )\n          ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    DatabaseService.prototype.createMyLists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return (new SQLite(_this.DB_NAME)).then(function (db) {
                db.execSQL("\n          CREATE TABLE IF NOT EXISTS " + _this.MYLISTS_TABLE_NAME + " (\n            glist_id INTEGER PRIMARY KEY NOT NULL DEFAULT (0),\n            glist_name TEXT NOT NULL,\n            start TEXT,\n            end TEXT\n          )\n        ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    DatabaseService.prototype.insertGrocery = function (grocerie) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList()
                .then(function (res) {
                res.execSQL("INSERT INTO " + _this.GROCERYLIST_TABLE_NAME + " (BARCODE, PRODUCT_NAME) VALUES (?, ?)", [grocerie.barCode, grocerie.productName])
                    .then(function (id) {
                    console.log("[DATABASE SERVICE] Added record in " + _this.GROCERYLIST_TABLE_NAME + " table, id: ", id);
                    resolve(true);
                }, function (error) {
                    console.log("[DATABASE SERVICE] Insert record in " + _this.GROCERYLIST_TABLE_NAME + " table ERROR: ", error);
                    reject(false);
                });
            });
        });
    };
    DatabaseService.prototype.getMyLists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all("SELECT * FROM " + _this.MYLISTS_TABLE_NAME).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        result.push({
                            listId: row[0],
                            listName: row[1],
                            startDate: row[2],
                            endDate: row[3]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    DatabaseService.prototype.getGroceryListDetails = function (listId) {
        var _this = this;
        var queryString = "\n      SELECT\n        " + this.MYLISTS_TABLE_NAME + ".glist_id as glist_id,\n        groceryList.glist_id as id,\n        glist_name,\n        product_id_fk,\n        product_name,\n        brand,\n        quantity\n      FROM " + this.GROCERYLIST_TABLE_NAME + "\n      INNER JOIN " + this.MYLISTS_TABLE_NAME + " ON " + this.MYLISTS_TABLE_NAME + ".glist_id = " + this.GROCERYLIST_TABLE_NAME + ".list_id_fk\n      INNER JOIN " + this.PRODUCTS_TABLE_NAME + " ON " + this.PRODUCTS_TABLE_NAME + ".product_id = " + this.GROCERYLIST_TABLE_NAME + ".product_id_fk\n      WHERE list_id_fk = " + listId + " ORDER BY glist_id COLLATE NOCASE\n    ";
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all(queryString).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        console.log(JSON.stringify(row));
                        result.push({
                            id: row[1],
                            productId: row[3],
                            productName: row[4],
                            brand: row[5],
                            quantity: row[6]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    DatabaseService.prototype.insertIntoGroceryListDetails = function (listId, productId, quantity) {
        var _this = this;
        var queryString = "\n      INSERT INTO " + this.GROCERYLIST_TABLE_NAME + " (product_id_fk, list_id_fk, quantity)\n      VALUES (" + productId + ", " + listId + ", " + quantity + ")\n    ";
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] insertIntoGroceryListDetails");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    DatabaseService.prototype.updateGroceryListDetails = function (glistId, listId, productId, quantity) {
        var _this = this;
        var queryString = "\n      UPDATE " + this.GROCERYLIST_TABLE_NAME + "\n      SET product_id_fk=" + productId + ", list_id_fk=" + listId + ", quantity=" + quantity + "\n      WHERE glist_id=" + glistId + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] updateGroceryListDetails");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    DatabaseService.prototype.deleteGroceryListItem = function (id) {
        var _this = this;
        var queryString = "\n      DELETE FROM " + this.GROCERYLIST_TABLE_NAME + "\n      WHERE glist_id=" + id + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] deleteGroceryListItem");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    DatabaseService = __decorate([
        core_1.Injectable()
    ], DatabaseService);
    return DatabaseService;
}());
exports.DatabaseService = DatabaseService;
//# sourceMappingURL=data:application/json;base64,