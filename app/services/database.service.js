"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var SQLite = require("nativescript-sqlite");
var DatabaseService = /** @class */ (function () {
    function DatabaseService() {
        this.DB_NAME = "cosacompro.db";
        this.PRODUCTS_TABLE_NAME = "products";
        this.GROCERYLIST_TABLE_NAME = "grocerylist";
        this.MYLISTS_TABLE_NAME = "list";
    }
    DatabaseService.prototype.createGroceryList = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return (new SQLite(_this.DB_NAME)).then(function (db) {
                db.execSQL("\n            CREATE TABLE IF NOT EXISTS " + _this.GROCERYLIST_TABLE_NAME + " (\n              glist_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT (0),\n              quantity INTEGER DEFAULT (1),\n              product_id_fk INTEGER NOT NULL,\n              list_id_fk INTEGER NOT NULL,\n              FOREIGN KEY (product_id_fk) REFERENCES list (glist_id),\n              FOREIGN KEY (list_id_fk) REFERENCES product (product_id)\n            )\n          ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    DatabaseService.prototype.createMyLists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return (new SQLite(_this.DB_NAME)).then(function (db) {
                db.execSQL("\n          CREATE TABLE IF NOT EXISTS " + _this.MYLISTS_TABLE_NAME + " (\n            glist_id INTEGER PRIMARY KEY NOT NULL DEFAULT (0),\n            glist_name TEXT NOT NULL,\n            start TEXT,\n            end TEXT\n          )\n        ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    DatabaseService.prototype.insertGrocery = function (grocerie) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList()
                .then(function (res) {
                res.execSQL("INSERT INTO " + _this.GROCERYLIST_TABLE_NAME + " (BARCODE, PRODUCT_NAME) VALUES (?, ?)", [grocerie.barCode, grocerie.productName])
                    .then(function (id) {
                    console.log("[DATABASE SERVICE] Added record in " + _this.GROCERYLIST_TABLE_NAME + " table, id: ", id);
                    resolve(true);
                }, function (error) {
                    console.log("[DATABASE SERVICE] Insert record in " + _this.GROCERYLIST_TABLE_NAME + " table ERROR: ", error);
                    reject(false);
                });
            });
        });
    };
    DatabaseService.prototype.getMyLists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all("SELECT * FROM " + _this.MYLISTS_TABLE_NAME).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        result.push({
                            listId: row[0],
                            listName: row[1],
                            startDate: row[2],
                            endDate: row[3]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    DatabaseService.prototype.getGroceryListDetails = function (listId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.createGroceryList().then(function (res) {
                return res.all("\n            SELECT\n              " + _this.MYLISTS_TABLE_NAME + ".glist_id as glist_id,\n              glist_name,\n              product_name,\n              brand,\n              quantity\n            FROM " + _this.GROCERYLIST_TABLE_NAME + "\n            INNER JOIN " + _this.MYLISTS_TABLE_NAME + " ON " + _this.MYLISTS_TABLE_NAME + ".glist_id = " + _this.GROCERYLIST_TABLE_NAME + ".list_id_fk\n            INNER JOIN " + _this.PRODUCTS_TABLE_NAME + " ON " + _this.PRODUCTS_TABLE_NAME + ".product_id = " + _this.GROCERYLIST_TABLE_NAME + ".product_id_fk\n            WHERE list_id_fk = " + listId + " ORDER BY glist_id COLLATE NOCASE\n          ").then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        result.push({
                            productName: row[2],
                            brand: row[3],
                            quantity: row[4]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    DatabaseService = __decorate([
        core_1.Injectable()
    ], DatabaseService);
    return DatabaseService;
}());
exports.DatabaseService = DatabaseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFiYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFFM0MsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFHNUM7SUFEQTtRQUdVLFlBQU8sR0FBVyxlQUFlLENBQUM7UUFDbEMsd0JBQW1CLEdBQVcsVUFBVSxDQUFDO1FBQ3pDLDJCQUFzQixHQUFXLGFBQWEsQ0FBQztRQUMvQyx1QkFBa0IsR0FBVyxNQUFNLENBQUM7SUF5SDlDLENBQUM7SUF2SFMsMkNBQWlCLEdBQXpCO1FBQUEsaUJBd0JDO1FBdkJDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ3ZDLEVBQUUsQ0FBQyxPQUFPLENBQUMsOENBQ3NCLEtBQUksQ0FBQyxzQkFBc0IseVlBUXpELENBQUM7cUJBQ0QsSUFBSSxDQUFDO29CQUNKLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxDQUFDLEVBQUUsVUFBQSxLQUFLO29CQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVPLHVDQUFhLEdBQXJCO1FB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QyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUE3SFUsZUFBZTtRQUQzQixpQkFBVSxFQUFFO09BQ0EsZUFBZSxDQThIM0I7SUFBRCxzQkFBQztDQUFBLEFBOUhELElBOEhDO0FBOUhZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5sZXQgU1FMaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEYXRhYmFzZVNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIERCX05BTUU6IHN0cmluZyA9IFwiY29zYWNvbXByby5kYlwiO1xyXG4gIHByaXZhdGUgUFJPRFVDVFNfVEFCTEVfTkFNRTogc3RyaW5nID0gXCJwcm9kdWN0c1wiO1xyXG4gIHByaXZhdGUgR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRTogc3RyaW5nID0gXCJncm9jZXJ5bGlzdFwiO1xyXG4gIHByaXZhdGUgTVlMSVNUU19UQUJMRV9OQU1FOiBzdHJpbmcgPSBcImxpc3RcIjtcclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVHcm9jZXJ5TGlzdCgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHJldHVybiAobmV3IFNRTGl0ZSh0aGlzLkRCX05BTUUpKS50aGVuKGRiID0+IHtcclxuICAgICAgICBkYi5leGVjU1FMKGBcclxuICAgICAgICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJHt0aGlzLkdST0NFUllMSVNUX1RBQkxFX05BTUV9IChcclxuICAgICAgICAgICAgICBnbGlzdF9pZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQgTk9UIE5VTEwgREVGQVVMVCAoMCksXHJcbiAgICAgICAgICAgICAgcXVhbnRpdHkgSU5URUdFUiBERUZBVUxUICgxKSxcclxuICAgICAgICAgICAgICBwcm9kdWN0X2lkX2ZrIElOVEVHRVIgTk9UIE5VTEwsXHJcbiAgICAgICAgICAgICAgbGlzdF9pZF9mayBJTlRFR0VSIE5PVCBOVUxMLFxyXG4gICAgICAgICAgICAgIEZPUkVJR04gS0VZIChwcm9kdWN0X2lkX2ZrKSBSRUZFUkVOQ0VTIGxpc3QgKGdsaXN0X2lkKSxcclxuICAgICAgICAgICAgICBGT1JFSUdOIEtFWSAobGlzdF9pZF9maykgUkVGRVJFTkNFUyBwcm9kdWN0IChwcm9kdWN0X2lkKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICBgKVxyXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKGRiKTtcclxuICAgICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREFUQUJBU0UgU0VSVklDRSBFUlJPUl0gY3JlYXRlREIgLT4gY3JlYXRlIHRhYmxlOlwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGNyZWF0ZURCOlwiLCBlcnJvcik7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZU15TGlzdHMoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICByZXR1cm4gKG5ldyBTUUxpdGUodGhpcy5EQl9OQU1FKSkudGhlbihkYiA9PiB7XHJcbiAgICAgICAgZGIuZXhlY1NRTChgXHJcbiAgICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAke3RoaXMuTVlMSVNUU19UQUJMRV9OQU1FfSAoXHJcbiAgICAgICAgICAgIGdsaXN0X2lkIElOVEVHRVIgUFJJTUFSWSBLRVkgTk9UIE5VTEwgREVGQVVMVCAoMCksXHJcbiAgICAgICAgICAgIGdsaXN0X25hbWUgVEVYVCBOT1QgTlVMTCxcclxuICAgICAgICAgICAgc3RhcnQgVEVYVCxcclxuICAgICAgICAgICAgZW5kIFRFWFRcclxuICAgICAgICAgIClcclxuICAgICAgICBgKVxyXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKGRiKTtcclxuICAgICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbREFUQUJBU0UgU0VSVklDRSBFUlJPUl0gY3JlYXRlREIgLT4gY3JlYXRlIHRhYmxlOlwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGNyZWF0ZURCOlwiLCBlcnJvcik7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5zZXJ0R3JvY2VyeShncm9jZXJpZTogYW55KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmNyZWF0ZUdyb2NlcnlMaXN0KClcclxuICAgICAgICAudGhlbigocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgIHJlcy5leGVjU1FMKGBJTlNFUlQgSU5UTyAke3RoaXMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX0gKEJBUkNPREUsIFBST0RVQ1RfTkFNRSkgVkFMVUVTICg/LCA/KWAsIFtncm9jZXJpZS5iYXJDb2RlLCBncm9jZXJpZS5wcm9kdWN0TmFtZV0pXHJcbiAgICAgICAgICAgIC50aGVuKGlkID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0RBVEFCQVNFIFNFUlZJQ0VdIEFkZGVkIHJlY29yZCBpbiAke3RoaXMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX0gdGFibGUsIGlkOiBgLCBpZCk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbREFUQUJBU0UgU0VSVklDRV0gSW5zZXJ0IHJlY29yZCBpbiAke3RoaXMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX0gdGFibGUgRVJST1I6IGAsIGVycm9yKTtcclxuICAgICAgICAgICAgICByZWplY3QoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNeUxpc3RzKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5jcmVhdGVHcm9jZXJ5TGlzdCgpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5hbGwoYFNFTEVDVCAqIEZST00gJHt0aGlzLk1ZTElTVFNfVEFCTEVfTkFNRX1gKS50aGVuKHJvd3MgPT4ge1xyXG4gICAgICAgICAgbGV0IHJlc3VsdDogQXJyYXk8YW55PiA9IFtdO1xyXG4gICAgICAgICAgcm93cy5mb3JFYWNoKHJvdyA9PiB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgICAgICBsaXN0SWQ6IHJvd1swXSxcclxuICAgICAgICAgICAgICBsaXN0TmFtZTogcm93WzFdLFxyXG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZTogcm93WzJdLFxyXG4gICAgICAgICAgICAgIGVuZERhdGU6IHJvd1szXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgIH0pLCBlcnJvciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIltEQVRBQkFTRSBTRVJWSUNFIEVSUk9SXSBnZXRHcm9jZXJpZXM6XCIsIGVycm9yKTtcclxuICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0R3JvY2VyeUxpc3REZXRhaWxzKGxpc3RJZDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmNyZWF0ZUdyb2NlcnlMaXN0KCkudGhlbigocmVzOiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzLmFsbChgXHJcbiAgICAgICAgICAgIFNFTEVDVFxyXG4gICAgICAgICAgICAgICR7dGhpcy5NWUxJU1RTX1RBQkxFX05BTUV9LmdsaXN0X2lkIGFzIGdsaXN0X2lkLFxyXG4gICAgICAgICAgICAgIGdsaXN0X25hbWUsXHJcbiAgICAgICAgICAgICAgcHJvZHVjdF9uYW1lLFxyXG4gICAgICAgICAgICAgIGJyYW5kLFxyXG4gICAgICAgICAgICAgIHF1YW50aXR5XHJcbiAgICAgICAgICAgIEZST00gJHt0aGlzLkdST0NFUllMSVNUX1RBQkxFX05BTUV9XHJcbiAgICAgICAgICAgIElOTkVSIEpPSU4gJHt0aGlzLk1ZTElTVFNfVEFCTEVfTkFNRX0gT04gJHt0aGlzLk1ZTElTVFNfVEFCTEVfTkFNRX0uZ2xpc3RfaWQgPSAke3RoaXMuR1JPQ0VSWUxJU1RfVEFCTEVfTkFNRX0ubGlzdF9pZF9ma1xyXG4gICAgICAgICAgICBJTk5FUiBKT0lOICR7dGhpcy5QUk9EVUNUU19UQUJMRV9OQU1FfSBPTiAke3RoaXMuUFJPRFVDVFNfVEFCTEVfTkFNRX0ucHJvZHVjdF9pZCA9ICR7dGhpcy5HUk9DRVJZTElTVF9UQUJMRV9OQU1FfS5wcm9kdWN0X2lkX2ZrXHJcbiAgICAgICAgICAgIFdIRVJFIGxpc3RfaWRfZmsgPSAke2xpc3RJZH0gT1JERVIgQlkgZ2xpc3RfaWQgQ09MTEFURSBOT0NBU0VcclxuICAgICAgICAgIGApLnRoZW4ocm93cyA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IEFycmF5PGFueT4gPSBbXTtcclxuICAgICAgICAgICAgcm93cy5mb3JFYWNoKHJvdyA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgcHJvZHVjdE5hbWU6IHJvd1syXSxcclxuICAgICAgICAgICAgICAgIGJyYW5kOiByb3dbM10sXHJcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogcm93WzRdXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICB9KSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltEQVRBQkFTRSBTRVJWSUNFIEVSUk9SXSBnZXRHcm9jZXJpZXM6XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gIH1cclxufSJdfQ==