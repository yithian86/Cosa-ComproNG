"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var globals_1 = require("~/entities/globals");
var database_service_1 = require("~/services/database.service");
var SQLite = require("nativescript-sqlite");
var ProductsDBService = /** @class */ (function () {
    function ProductsDBService(baseDBService) {
        this.baseDBService = baseDBService;
    }
    ProductsDBService.prototype.createProductsTable = function () {
        var queryString = "";
        return new Promise(function (resolve, reject) {
            return (new SQLite(globals_1.DB_GLOBALS.DB_NAME)).then(function (db) {
                db.execSQL(queryString)
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    ProductsDBService.prototype.getProducts = function (category) {
        var _this = this;
        var queryString = "SELECT * FROM " + globals_1.DB_GLOBALS.TABLES.PRODUCTS;
        if (!!category) {
            queryString += " WHERE category='" + category + "'";
        }
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then(function (products) {
                    var result = [];
                    products.forEach(function (prod) {
                        var newProduct = {
                            id: prod[0],
                            weightVolume: prod[1],
                            barCode: prod[2],
                            productName: prod[3],
                            brand: prod[4],
                            category: prod[5]
                        };
                        result.push(newProduct);
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getProducts:", error);
                    reject(error);
                };
            });
        });
    };
    ProductsDBService.prototype.getProductByBarcode = function (barcode) {
        var _this = this;
        var queryString = "SELECT * FROM " + globals_1.DB_GLOBALS.TABLES.PRODUCTS + " WHERE barcode='" + barcode + "'";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then(function (result) {
                    if (result && result.length > 0) {
                        var prod = result[0];
                        var resultProduct = {
                            id: prod[0],
                            weightVolume: prod[1],
                            barCode: prod[2],
                            productName: prod[3],
                            brand: prod[4],
                            category: prod[5]
                        };
                        resolve(resultProduct);
                    }
                    else {
                        resolve(undefined);
                    }
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getProductByBarcode:", error);
                    reject(error);
                };
            });
        });
    };
    ProductsDBService.prototype.getProductPrices = function (productId) {
        var _this = this;
        var queryString = "SELECT * FROM " + globals_1.DB_GLOBALS.TABLES.PRODUCTPRICES + " WHERE product_id_fk='" + productId + "'";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then(function (prices) {
                    var result = [];
                    prices.forEach(function (prod) {
                        var newPrice = {
                            id: prod[0],
                            normalPrice: prod[1],
                            specialPrice: prod[2],
                            specialDate: prod[3],
                            productId: prod[4],
                            sellerId: prod[5]
                        };
                        result.push(newPrice);
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getProductByBarcode:", error);
                    reject(error);
                };
            });
        });
    };
    ProductsDBService.prototype.addProduct = function (product) {
        var _this = this;
        var queryString = "INSERT INTO " + globals_1.DB_GLOBALS.TABLES.PRODUCTS + " (\"product_name\", \"barCode\", \"brand\", \"category\", \"weight_volume\")";
        queryString += " VALUES ('" + product.productName + "', '" + product.barCode + "', '" + product.brand + "', '" + product.category + "', '" + product.weightVolume + "')";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (db) {
                return db.execSQL(queryString).then(function (id) {
                    id ? resolve(id) : reject("error");
                }, function (error) {
                    reject(error);
                });
            });
        });
    };
    ProductsDBService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [database_service_1.DatabaseService])
    ], ProductsDBService);
    return ProductsDBService;
}());
exports.ProductsDBService = ProductsDBService;
//# sourceMappingURL=data:application/json;base64,