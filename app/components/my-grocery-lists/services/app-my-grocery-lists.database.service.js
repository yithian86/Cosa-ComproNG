"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var globals_1 = require("~/entities/globals");
var database_service_1 = require("~/services/database.service");
var SQLite = require("nativescript-sqlite");
var MyGroceryListsDBService = /** @class */ (function () {
    function MyGroceryListsDBService(baseDBService) {
        this.baseDBService = baseDBService;
    }
    MyGroceryListsDBService.prototype.createMyLists = function () {
        var queryString = "\n      CREATE TABLE IF NOT EXISTS " + globals_1.DB_GLOBALS.TABLES.MYLISTS + " (\n        glist_id INTEGER PRIMARY KEY NOT NULL DEFAULT (0),\n        glist_name TEXT NOT NULL,\n        start TEXT,\n        end TEXT\n      )\n    ";
        return new Promise(function (resolve, reject) {
            return (new SQLite(globals_1.DB_GLOBALS.DB_NAME)).then(function (db) {
                db.execSQL(queryString)
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    MyGroceryListsDBService.prototype.getMyLists = function () {
        var _this = this;
        var queryString = "SELECT * FROM " + globals_1.DB_GLOBALS.TABLES.MYLISTS;
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        result.push({
                            listId: row[0],
                            listName: row[1],
                            startDate: row[2],
                            endDate: row[3]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    MyGroceryListsDBService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [database_service_1.DatabaseService])
    ], MyGroceryListsDBService);
    return MyGroceryListsDBService;
}());
exports.MyGroceryListsDBService = MyGroceryListsDBService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLW15LWdyb2NlcnktbGlzdHMuZGF0YWJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcC1teS1ncm9jZXJ5LWxpc3RzLmRhdGFiYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MsOENBQWdEO0FBQ2hELGdFQUE4RDtBQUU5RCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc1QztJQUNFLGlDQUFvQixhQUE4QjtRQUE5QixrQkFBYSxHQUFiLGFBQWEsQ0FBaUI7SUFBSSxDQUFDO0lBRS9DLCtDQUFhLEdBQXJCO1FBQ0UsSUFBTSxXQUFXLEdBQVcsd0NBQ0csb0JBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyw0SkFNdkQsQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLE1BQU0sQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLG9CQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO2dCQUM3QyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztxQkFDcEIsSUFBSSxDQUFDO29CQUNKLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxDQUFDLEVBQUUsVUFBQSxLQUFLO29CQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLDRDQUFVLEdBQWpCO1FBQUEsaUJBc0JDO1FBckJDLElBQU0sV0FBVyxHQUFXLG1CQUFpQixvQkFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFTLENBQUM7UUFFekUsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDakMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFRO2dCQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO29CQUNuQyxJQUFJLE1BQU0sR0FBZSxFQUFFLENBQUM7b0JBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO3dCQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUM7NEJBQ1YsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQ2QsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQ2hCLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNqQixPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzt5QkFDaEIsQ0FBQyxDQUFDO29CQUNMLENBQUMsQ0FBQyxDQUFDO29CQUNILE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbEIsQ0FBQyxDQUFDLEVBQUUsVUFBQSxLQUFLO29CQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQzdELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxDQUFBO1lBQ0gsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFuRFUsdUJBQXVCO1FBRG5DLGlCQUFVLEVBQUU7eUNBRXdCLGtDQUFlO09BRHZDLHVCQUF1QixDQW9EbkM7SUFBRCw4QkFBQztDQUFBLEFBcERELElBb0RDO0FBcERZLDBEQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBEQl9HTE9CQUxTIH0gZnJvbSBcIn4vZW50aXRpZXMvZ2xvYmFsc1wiO1xyXG5pbXBvcnQgeyBEYXRhYmFzZVNlcnZpY2UgfSBmcm9tIFwifi9zZXJ2aWNlcy9kYXRhYmFzZS5zZXJ2aWNlXCI7XHJcblxyXG5sZXQgU1FMaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNeUdyb2NlcnlMaXN0c0RCU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlREJTZXJ2aWNlOiBEYXRhYmFzZVNlcnZpY2UpIHsgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZU15TGlzdHMoKSB7XHJcbiAgICBjb25zdCBxdWVyeVN0cmluZzogc3RyaW5nID0gYFxyXG4gICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAke0RCX0dMT0JBTFMuVEFCTEVTLk1ZTElTVFN9IChcclxuICAgICAgICBnbGlzdF9pZCBJTlRFR0VSIFBSSU1BUlkgS0VZIE5PVCBOVUxMIERFRkFVTFQgKDApLFxyXG4gICAgICAgIGdsaXN0X25hbWUgVEVYVCBOT1QgTlVMTCxcclxuICAgICAgICBzdGFydCBURVhULFxyXG4gICAgICAgIGVuZCBURVhUXHJcbiAgICAgIClcclxuICAgIGA7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgcmV0dXJuIChuZXcgU1FMaXRlKERCX0dMT0JBTFMuREJfTkFNRSkpLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgIGRiLmV4ZWNTUUwocXVlcnlTdHJpbmcpXHJcbiAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZGIpO1xyXG4gICAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltEQVRBQkFTRSBTRVJWSUNFIEVSUk9SXSBjcmVhdGVEQiAtPiBjcmVhdGUgdGFibGU6XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJbREFUQUJBU0UgU0VSVklDRSBFUlJPUl0gY3JlYXRlREI6XCIsIGVycm9yKTtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNeUxpc3RzKCkge1xyXG4gICAgY29uc3QgcXVlcnlTdHJpbmc6IHN0cmluZyA9IGBTRUxFQ1QgKiBGUk9NICR7REJfR0xPQkFMUy5UQUJMRVMuTVlMSVNUU31gO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMuYmFzZURCU2VydmljZS5jb25uZWN0VG9EQigpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5hbGwocXVlcnlTdHJpbmcpLnRoZW4ocm93cyA9PiB7XHJcbiAgICAgICAgICBsZXQgcmVzdWx0OiBBcnJheTxhbnk+ID0gW107XHJcbiAgICAgICAgICByb3dzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgICAgIGxpc3RJZDogcm93WzBdLFxyXG4gICAgICAgICAgICAgIGxpc3ROYW1lOiByb3dbMV0sXHJcbiAgICAgICAgICAgICAgc3RhcnREYXRlOiByb3dbMl0sXHJcbiAgICAgICAgICAgICAgZW5kRGF0ZTogcm93WzNdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfSksIGVycm9yID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RBVEFCQVNFIFNFUlZJQ0UgRVJST1JdIGdldEdyb2NlcmllczpcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcbn0iXX0=