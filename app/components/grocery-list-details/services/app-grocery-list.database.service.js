"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var globals_1 = require("~/entities/globals");
var database_service_1 = require("~/services/database.service");
var SQLite = require("nativescript-sqlite");
var GroceryListDetailsDBService = /** @class */ (function () {
    function GroceryListDetailsDBService(baseDBService) {
        this.baseDBService = baseDBService;
    }
    GroceryListDetailsDBService.prototype.createGroceryListTable = function () {
        return new Promise(function (resolve, reject) {
            return (new SQLite(globals_1.DB_GLOBALS.DB_NAME)).then(function (db) {
                db.execSQL("\n          CREATE TABLE IF NOT EXISTS " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + " (\n            glist_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL DEFAULT (0),\n            quantity INTEGER DEFAULT (1),\n            product_id_fk INTEGER NOT NULL,\n            list_id_fk INTEGER NOT NULL,\n            FOREIGN KEY (product_id_fk) REFERENCES list (glist_id),\n            FOREIGN KEY (list_id_fk) REFERENCES product (product_id)\n          )\n        ")
                    .then(function () {
                    resolve(db);
                }, function (error) {
                    console.log("[DATABASE SERVICE ERROR] createDB -> create table:", error);
                    reject(error);
                });
            }, function (error) {
                console.log("[DATABASE SERVICE ERROR] createDB:", error);
                reject(error);
            });
        });
    };
    GroceryListDetailsDBService.prototype.getGroceryListDetails = function (listId) {
        var _this = this;
        var queryString = "\n      SELECT\n        " + globals_1.DB_GLOBALS.TABLES.MYLISTS + ".glist_id as glist_id,\n        groceryList.glist_id as id,\n        glist_name,\n        product_id_fk,\n        product_name,\n        brand,\n        quantity\n      FROM " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + "\n      INNER JOIN " + globals_1.DB_GLOBALS.TABLES.MYLISTS + " ON " + globals_1.DB_GLOBALS.TABLES.MYLISTS + ".glist_id = " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + ".list_id_fk\n      INNER JOIN " + globals_1.DB_GLOBALS.TABLES.PRODUCTS + " ON " + globals_1.DB_GLOBALS.TABLES.PRODUCTS + ".product_id = " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + ".product_id_fk\n      WHERE list_id_fk = " + listId + " ORDER BY glist_id COLLATE NOCASE\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then(function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        // console.log(JSON.stringify(row));
                        result.push({
                            id: row[1],
                            productId: row[3],
                            productName: row[4],
                            brand: row[5],
                            quantity: row[6]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getGroceries:", error);
                    reject(error);
                };
            });
        });
    };
    GroceryListDetailsDBService.prototype.getListItem = function (listId, productId) {
        var _this = this;
        var queryString = "\n      SELECT * FROM " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + "\n      WHERE list_id_fk = " + listId + " AND product_id_fk = " + productId + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) {
                    var result = [];
                    rows.forEach(function (row) {
                        console.log(JSON.stringify(row));
                        result.push({
                            id: row[1],
                            productId: row[3],
                            productName: row[4],
                            brand: row[5],
                            quantity: row[6]
                        });
                    });
                    resolve(result);
                }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] getListItem");
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDetailsDBService.prototype.insertIntoGroceryListDetails = function (listId, productId, quantity) {
        var _this = this;
        var queryString = "\n      INSERT INTO " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + " (product_id_fk, list_id_fk, quantity)\n      VALUES (" + productId + ", " + listId + ", " + quantity + ")\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] insertIntoGroceryListDetails");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDetailsDBService.prototype.updateGroceryListDetails = function (glistId, listId, productId, quantity) {
        var _this = this;
        var queryString = "\n      UPDATE " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + "\n      SET product_id_fk=" + productId + ", list_id_fk=" + listId + ", quantity=" + quantity + "\n      WHERE glist_id=" + glistId + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] updateGroceryListDetails");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDetailsDBService.prototype.deleteGroceryListItem = function (id) {
        var _this = this;
        var queryString = "\n      DELETE FROM " + globals_1.DB_GLOBALS.TABLES.GROCERYLIST + "\n      WHERE glist_id=" + id + "\n    ";
        return new Promise(function (resolve, reject) {
            _this.baseDBService.connectToDB().then(function (res) {
                return res.all(queryString).then((function (rows) { return resolve(true); }), function (error) {
                    console.log("[DATABASE SERVICE ERROR] deleteGroceryListItem");
                    console.log(queryString);
                    reject(error);
                }), function (error) { return reject(error); };
            });
        });
    };
    GroceryListDetailsDBService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [database_service_1.DatabaseService])
    ], GroceryListDetailsDBService);
    return GroceryListDetailsDBService;
}());
exports.GroceryListDetailsDBService = GroceryListDetailsDBService;
//# sourceMappingURL=data:application/json;base64,